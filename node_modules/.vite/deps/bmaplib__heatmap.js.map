{
  "version": 3,
  "sources": ["../../bmaplib.heatmap/index.js"],
  "sourcesContent": ["(function (root, factory) {  \n    if (typeof exports === 'object') {  \n        module.exports = factory();\n    } else if (typeof define === 'function' && define.amd) {  \n        define(factory);  \n    } else {\n        root.BMapLib = root.BMapLib || {};\n        root.BMapLib.Heatmap = root.BMapLib.Heatmap || factory();  \n    }  \n})(this, function() {\n    function inherits (subClass, superClass, className) {\n        var key, proto,\n            selfProps = subClass.prototype,\n            clazz = new Function();\n\n        clazz.prototype = superClass.prototype;\n        proto = subClass.prototype = new clazz();\n        for (key in selfProps) {\n            proto[key] = selfProps[key];\n        }\n        subClass.prototype.constructor = subClass;\n        subClass.superClass = superClass.prototype;\n\n        // 类名标识，兼容Class的toString，基本没用\n        if (\"string\" == typeof className) {\n            proto._className = className;\n        }\n    };\n    var heatmapFactory = (function(){\n        // store object constructor\n        // a heatmap contains a store\n        // the store has to know about the heatmap in order to trigger heatmap updates when datapoints get added\n        var store = function store(hmap){\n\n            var _ = {\n                // data is a two dimensional array\n                // a datapoint gets saved as data[point-x-value][point-y-value]\n                // the value at [point-x-value][point-y-value] is the occurrence of the datapoint\n                data: [],\n                // tight coupling of the heatmap object\n                heatmap: hmap\n            };\n            // the max occurrence - the heatmaps radial gradient alpha transition is based on it\n            this.max = 1;\n\n            this.get = function(key){\n                return _[key];\n            };\n            this.set = function(key, value){\n                _[key] = value;\n            };\n        }\n\n        store.prototype = {\n            // function for adding datapoints to the store\n            // datapoints are usually defined by x and y but could also contain a third parameter which represents the occurrence\n            addDataPoint: function(x, y){\n                if(x < 0 || y < 0)\n                    return;\n\n                var me = this,\n                    heatmap = me.get(\"heatmap\"),\n                    data = me.get(\"data\");\n\n                if(!data[x])\n                    data[x] = [];\n\n                if(!data[x][y])\n                    data[x][y] = 0;\n\n                // if count parameter is set increment by count otherwise by 1\n                data[x][y]+=(arguments.length<3)?1:arguments[2];\n                \n                me.set(\"data\", data);\n                // do we have a new maximum?\n                if(me.max < data[x][y]){\n                    // max changed, we need to redraw all existing(lower) datapoints\n                    heatmap.get(\"actx\").clearRect(0,0,heatmap.get(\"width\"),heatmap.get(\"height\"));\n                    me.setDataSet({ max: data[x][y], data: data }, true);\n                    return;\n                }\n                heatmap.drawAlpha(x, y, data[x][y], true);\n            },\n            setDataSet: function(obj, internal){\n                var me = this,\n                    heatmap = me.get(\"heatmap\"),\n                    data = [],\n                    d = obj.data,\n                    dlen = d.length;\n                // clear the heatmap before the data set gets drawn\n                heatmap.clear();\n                this.max = obj.max;\n                // if a legend is set, update it\n                heatmap.get(\"legend\") && heatmap.get(\"legend\").update(obj.max);\n                \n                if(internal != null && internal){\n                    for(var one in d){\n                        // jump over undefined indexes\n                        if(one === undefined)\n                            continue;\n                        for(var two in d[one]){\n                            if(two === undefined)\n                                continue;\n                            // if both indexes are defined, push the values into the array\n                            heatmap.drawAlpha(one, two, d[one][two], false);   \n                        }\n                    }\n                }else{\n                    while(dlen--){\n                        var point = d[dlen];\n                        heatmap.drawAlpha(point.x, point.y, point.count, false);\n                        if(!data[point.x])\n                            data[point.x] = [];\n\n                        if(!data[point.x][point.y])\n                            data[point.x][point.y] = 0;\n\n                        data[point.x][point.y] = point.count;\n                    }\n                }\n                heatmap.colorize();\n                this.set(\"data\", d);\n            },\n            exportDataSet: function(){\n                var me = this,\n                    data = me.get(\"data\"),\n                    exportData = [];\n\n                for(var one in data){\n                    // jump over undefined indexes\n                    if(one === undefined)\n                        continue;\n                    for(var two in data[one]){\n                        if(two === undefined)\n                            continue;\n                        // if both indexes are defined, push the values into the array\n                        exportData.push({x: parseInt(one, 10), y: parseInt(two, 10), count: data[one][two]});\n                    }\n                }\n\n                return { max: me.max, data: exportData };\n            },\n            generateRandomDataSet: function(points){\n                var heatmap = this.get(\"heatmap\"),\n                w = heatmap.get(\"width\"),\n                h = heatmap.get(\"height\");\n                var randomset = {},\n                max = Math.floor(Math.random()*1000+1);\n                randomset.max = max;\n                var data = [];\n                while(points--){\n                    data.push({x: Math.floor(Math.random()*w+1), y: Math.floor(Math.random()*h+1), count: Math.floor(Math.random()*max+1)});\n                }\n                randomset.data = data;\n                this.setDataSet(randomset);\n            }\n        };\n\n        var legend = function legend(config){\n            this.config = config;\n\n            var _ = {\n                element: null,\n                labelsEl: null,\n                gradientCfg: null,\n                ctx: null\n            };\n            this.get = function(key){\n                return _[key];\n            };\n            this.set = function(key, value){\n                _[key] = value;\n            };\n            this.init();\n        };\n        legend.prototype = {\n            init: function(){\n                var me = this,\n                    config = me.config,\n                    title = config.title || \"Legend\",\n                    position = config.position,\n                    offset = config.offset || 10,\n                    gconfig = config.gradient,\n                    labelsEl = document.createElement(\"ul\"),\n                    labelsHtml = \"\",\n                    grad, element, gradient, positionCss = \"\";\n\n                me.processGradientObject();\n                \n                // Positioning\n\n                // top or bottom\n                if(position.indexOf('t') > -1){\n                    positionCss += 'top:'+offset+'px;';\n                }else{\n                    positionCss += 'bottom:'+offset+'px;';\n                }\n\n                // left or right\n                if(position.indexOf('l') > -1){\n                    positionCss += 'left:'+offset+'px;';\n                }else{\n                    positionCss += 'right:'+offset+'px;';\n                }\n\n                element = document.createElement(\"div\");\n                element.style.cssText = \"border-radius:5px;position:absolute;\"+positionCss+\"font-family:Helvetica; width:256px;z-index:10000000000; background:rgba(255,255,255,1);padding:10px;border:1px solid black;margin:0;\";\n                element.innerHTML = \"<h3 style='padding:0;margin:0;text-align:center;font-size:16px;'>\"+title+\"</h3>\";\n                // create gradient in canvas\n                labelsEl.style.cssText = \"position:relative;font-size:12px;display:block;list-style:none;list-style-type:none;margin:0;height:15px;\";\n                \n\n                // create gradient element\n                gradient = document.createElement(\"div\");\n                gradient.style.cssText = [\"position:relative;display:block;width:256px;height:15px;border-bottom:1px solid black; background-image:url(\",me.createGradientImage(),\");\"].join(\"\");\n\n                element.appendChild(labelsEl);\n                element.appendChild(gradient);\n                \n                me.set(\"element\", element);\n                me.set(\"labelsEl\", labelsEl);\n\n                me.update(1);\n            },\n            processGradientObject: function(){\n                // create array and sort it\n                var me = this,\n                    gradientConfig = this.config.gradient,\n                    gradientArr = [];\n\n                for(var key in gradientConfig){\n                    if(gradientConfig.hasOwnProperty(key)){\n                        gradientArr.push({ stop: key, value: gradientConfig[key] });\n                    }\n                }\n                gradientArr.sort(function(a, b){\n                    return (a.stop - b.stop);\n                });\n                gradientArr.unshift({ stop: 0, value: 'rgba(0,0,0,0)' });\n\n                me.set(\"gradientArr\", gradientArr);\n            },\n            createGradientImage: function(){\n                var me = this,\n                    gradArr = me.get(\"gradientArr\"),\n                    length = gradArr.length,\n                    canvas = document.createElement(\"canvas\"),\n                    ctx = canvas.getContext(\"2d\"),\n                    grad;\n                // the gradient in the legend including the ticks will be 256x15px\n                canvas.width = \"256\";\n                canvas.height = \"15\";\n\n                grad = ctx.createLinearGradient(0,5,256,10);\n\n                for(var i = 0; i < length; i++){\n                    grad.addColorStop(1/(length-1) * i, gradArr[i].value);\n                }\n\n                ctx.fillStyle = grad;\n                ctx.fillRect(0,5,256,10);\n                ctx.strokeStyle = \"black\";\n                ctx.beginPath();\n\n                for(var i = 0; i < length; i++){\n                    ctx.moveTo(((1/(length-1)*i*256) >> 0)+.5, 0);\n                    ctx.lineTo(((1/(length-1)*i*256) >> 0)+.5, (i==0)?15:5);\n                }\n                ctx.moveTo(255.5, 0);\n                ctx.lineTo(255.5, 15);\n                ctx.moveTo(255.5, 4.5);\n                ctx.lineTo(0, 4.5);\n                \n                ctx.stroke();\n\n                // we re-use the context for measuring the legends label widths\n                me.set(\"ctx\", ctx);\n\n                return canvas.toDataURL();\n            },\n            getElement: function(){\n                return this.get(\"element\");\n            },\n            update: function(max){\n                var me = this,\n                    gradient = me.get(\"gradientArr\"),\n                    ctx = me.get(\"ctx\"),\n                    labels = me.get(\"labelsEl\"),\n                    labelText, labelsHtml = \"\", offset;\n\n                for(var i = 0; i < gradient.length; i++){\n\n                    labelText = max*gradient[i].stop >> 0;\n                    offset = (ctx.measureText(labelText).width/2) >> 0;\n\n                    if(i == 0){\n                        offset = 0;\n                    }\n                    if(i == gradient.length-1){\n                        offset *= 2;\n                    }\n                    labelsHtml += '<li style=\"position:absolute;left:'+(((((1/(gradient.length-1)*i*256) || 0)) >> 0)-offset+.5)+'px\">'+labelText+'</li>';\n                }       \n                labels.innerHTML = labelsHtml;\n            }\n        };\n\n        // heatmap object constructor\n        var heatmap = function heatmap(config){\n            // private variables\n            var _ = {\n                radius : 40,\n                element : {},\n                canvas : {},\n                acanvas: {},\n                ctx : {},\n                actx : {},\n                legend: null,\n                visible : true,\n                width : 0,\n                height : 0,\n                max : false,\n                gradient : false,\n                opacity: 180,\n                premultiplyAlpha: false,\n                bounds: {\n                    l: 1000,\n                    r: 0,\n                    t: 1000,\n                    b: 0\n                },\n                debug: false\n            };\n            // heatmap store containing the datapoints and information about the maximum\n            // accessible via instance.store\n            this.store = new store(this);\n\n            this.get = function(key){\n                return _[key];\n            };\n            this.set = function(key, value){\n                _[key] = value;\n            };\n            // configure the heatmap when an instance gets created\n            this.configure(config);\n            // and initialize it\n            this.init();\n        };\n\n        // public functions\n        heatmap.prototype = {\n            configure: function(config){\n                var me = this,\n                    rout, rin;\n\n                me.set(\"radius\", config[\"radius\"] || 40);\n                me.set(\"element\", (config.element instanceof Object)?config.element:document.getElementById(config.element));\n                me.set(\"visible\", (config.visible != null)?config.visible:true);\n                me.set(\"max\", config.max || false);\n                me.set(\"gradient\", config.gradient || { 0.45: \"rgb(0,0,255)\", 0.55: \"rgb(0,255,255)\", 0.65: \"rgb(0,255,0)\", 0.95: \"yellow\", 1.0: \"rgb(255,0,0)\"});    // default is the common blue to red gradient\n                me.set(\"opacity\", parseInt(255/(100/config.opacity), 10) || 180);\n                me.set(\"width\", config.width || 0);\n                me.set(\"height\", config.height || 0);\n                me.set(\"debug\", config.debug);\n\n                if(config.legend){\n                    var legendCfg = config.legend;\n                    legendCfg.gradient = me.get(\"gradient\");\n                    me.set(\"legend\", new legend(legendCfg));\n                }\n                    \n            },\n            resize: function () {\n                var me = this,\n                    element = me.get(\"element\"),\n                    canvas = me.get(\"canvas\"),\n                    acanvas = me.get(\"acanvas\");\n                canvas.width = acanvas.width = me.get(\"width\") || element.style.width.replace(/px/, \"\") || me.getWidth(element);\n                this.set(\"width\", canvas.width);\n                canvas.height = acanvas.height = me.get(\"height\") || element.style.height.replace(/px/, \"\") || me.getHeight(element);\n                this.set(\"height\", canvas.height);\n            },\n\n            init: function(){\n                var me = this,\n                    canvas = document.createElement(\"canvas\"),\n                    acanvas = document.createElement(\"canvas\"),\n                    ctx = canvas.getContext(\"2d\"),\n                    actx = acanvas.getContext(\"2d\"),\n                    element = me.get(\"element\");\n\n                \n                me.initColorPalette();\n\n                me.set(\"canvas\", canvas);\n                me.set(\"ctx\", ctx);\n                me.set(\"acanvas\", acanvas);\n                me.set(\"actx\", actx);\n\n                me.resize();\n                canvas.style.cssText = acanvas.style.cssText = \"position:absolute;top:0;left:0;z-index:10000000;\";\n                \n                if(!me.get(\"visible\"))\n                    canvas.style.display = \"none\";\n\n                element.appendChild(canvas);\n                if(me.get(\"legend\")){\n                    element.appendChild(me.get(\"legend\").getElement());\n                }\n                \n                // debugging purposes only\n                if(me.get(\"debug\"))\n                    document.body.appendChild(acanvas);\n                \n                actx.shadowOffsetX = 15000; \n                actx.shadowOffsetY = 15000; \n                actx.shadowBlur = 15; \n            },\n            initColorPalette: function(){\n\n                var me = this,\n                    canvas = document.createElement(\"canvas\"),\n                    gradient = me.get(\"gradient\"),\n                    ctx, grad, testData;\n\n                canvas.width = \"1\";\n                canvas.height = \"256\";\n                ctx = canvas.getContext(\"2d\");\n                grad = ctx.createLinearGradient(0,0,1,256);\n\n                // Test how the browser renders alpha by setting a partially transparent pixel\n                // and reading the result.  A good browser will return a value reasonably close\n                // to what was set.  Some browsers (e.g. on Android) will return a ridiculously wrong value.\n                testData = ctx.getImageData(0,0,1,1);\n                testData.data[0] = testData.data[3] = 64; // 25% red & alpha\n                testData.data[1] = testData.data[2] = 0; // 0% blue & green\n                ctx.putImageData(testData, 0, 0);\n                testData = ctx.getImageData(0,0,1,1);\n                me.set(\"premultiplyAlpha\", (testData.data[0] < 60 || testData.data[0] > 70));\n                \n                for(var x in gradient){\n                    grad.addColorStop(x, gradient[x]);\n                }\n\n                ctx.fillStyle = grad;\n                ctx.fillRect(0,0,1,256);\n\n                me.set(\"gradient\", ctx.getImageData(0,0,1,256).data);\n            },\n            getWidth: function(element){\n                var width = element.offsetWidth;\n                if(element.style.paddingLeft){\n                    width+=element.style.paddingLeft;\n                }\n                if(element.style.paddingRight){\n                    width+=element.style.paddingRight;\n                }\n\n                return width;\n            },\n            getHeight: function(element){\n                var height = element.offsetHeight;\n                if(element.style.paddingTop){\n                    height+=element.style.paddingTop;\n                }\n                if(element.style.paddingBottom){\n                    height+=element.style.paddingBottom;\n                }\n\n                return height;\n            },\n            colorize: function(x, y){\n                // get the private variables\n                var me = this,\n                    width = me.get(\"width\"),\n                    radius = me.get(\"radius\"),\n                    height = me.get(\"height\"),\n                    actx = me.get(\"actx\"),\n                    ctx = me.get(\"ctx\"),\n                    x2 = radius * 3,\n                    premultiplyAlpha = me.get(\"premultiplyAlpha\"),\n                    palette = me.get(\"gradient\"),\n                    opacity = me.get(\"opacity\"),\n                    bounds = me.get(\"bounds\"),\n                    left, top, bottom, right, \n                    image, length, alpha, offset, finalAlpha;\n                \n                if(x != null && y != null){\n                    if(x+x2>width){\n                        x=width-x2;\n                    }\n                    if(x<0){\n                        x=0;\n                    }\n                    if(y<0){\n                        y=0;\n                    }\n                    if(y+x2>height){\n                        y=height-x2;\n                    }\n                    left = x;\n                    top = y;\n                    right = x + x2;\n                    bottom = y + x2;\n\n                }else{\n                    if(bounds['l'] < 0){\n                        left = 0;\n                    }else{\n                        left = bounds['l'];\n                    }\n                    if(bounds['r'] > width){\n                        right = width;\n                    }else{\n                        right = bounds['r'];\n                    }\n                    if(bounds['t'] < 0){\n                        top = 0;\n                    }else{\n                        top = bounds['t'];\n                    }\n                    if(bounds['b'] > height){\n                        bottom = height;\n                    }else{\n                        bottom = bounds['b'];\n                    }    \n                }\n\n                image = actx.getImageData(left, top, right-left, bottom-top);\n                length = image.data.length;\n                // loop thru the area\n                for(var i=3; i < length; i+=4){\n\n                    // [0] -> r, [1] -> g, [2] -> b, [3] -> alpha\n                    alpha = image.data[i],\n                    offset = alpha*4;\n\n                    if(!offset)\n                        continue;\n\n                    // we ve started with i=3\n                    // set the new r, g and b values\n                    finalAlpha = (alpha < opacity)?alpha:opacity;\n                    image.data[i-3]=palette[offset];\n                    image.data[i-2]=palette[offset+1];\n                    image.data[i-1]=palette[offset+2];\n                    \n                    if (premultiplyAlpha) {\n                    // To fix browsers that premultiply incorrectly, we'll pass in a value scaled\n                    // appropriately so when the multiplication happens the correct value will result.\n                    image.data[i-3] /= 255/finalAlpha;\n                    image.data[i-2] /= 255/finalAlpha;\n                    image.data[i-1] /= 255/finalAlpha;\n                    }\n                    \n                    // we want the heatmap to have a gradient from transparent to the colors\n                    // as long as alpha is lower than the defined opacity (maximum), we'll use the alpha value\n                    image.data[i] = finalAlpha;\n                }\n                // the rgb data manipulation didn't affect the ImageData object(defined on the top)\n                // after the manipulation process we have to set the manipulated data to the ImageData object\n                // image.data = imageData;\n                ctx.putImageData(image, left, top);\n            },\n            drawAlpha: function(x, y, count, colorize){\n                // storing the variables because they will be often used\n                var me = this,\n                    radius = me.get(\"radius\"),\n                    ctx = me.get(\"actx\"),\n                    max = me.get(\"max\"),\n                    bounds = me.get(\"bounds\"),\n                    xb = x - (1.5 * radius) >> 0, yb = y - (1.5 * radius) >> 0,\n                    xc = x + (1.5 * radius) >> 0, yc = y + (1.5 * radius) >> 0;\n\n                ctx.shadowColor = ('rgba(0,0,0,'+((count)?(count/me.store.max):'0.1')+')');\n\n                ctx.shadowOffsetX = 15000; \n                ctx.shadowOffsetY = 15000; \n                ctx.shadowBlur = 15; \n\n                ctx.beginPath();\n                ctx.arc(x - 15000, y - 15000, radius, 0, Math.PI * 2, true);\n                ctx.closePath();\n                ctx.fill();\n                if(colorize){\n                    // finally colorize the area\n                    me.colorize(xb,yb);\n                }else{\n                    // or update the boundaries for the area that then should be colorized\n                    if(xb < bounds[\"l\"]){\n                        bounds[\"l\"] = xb;\n                    }\n                    if(yb < bounds[\"t\"]){\n                        bounds[\"t\"] = yb;\n                    }\n                    if(xc > bounds['r']){\n                        bounds['r'] = xc;\n                    }\n                    if(yc > bounds['b']){\n                        bounds['b'] = yc;\n                    }\n                }\n            },\n            toggleDisplay: function(){\n                var me = this,\n                    visible = me.get(\"visible\"),\n                canvas = me.get(\"canvas\");\n\n                if(!visible)\n                    canvas.style.display = \"block\";\n                else\n                    canvas.style.display = \"none\";\n\n                me.set(\"visible\", !visible);\n            },\n            // dataURL export\n            getImageData: function(){\n                return this.get(\"canvas\").toDataURL();\n            },\n            clear: function(){\n                var me = this,\n                    w = me.get(\"width\"),\n                    h = me.get(\"height\");\n\n                me.store.set(\"data\",[]);\n                // @TODO: reset stores max to 1\n                //me.store.max = 1;\n                me.get(\"ctx\").clearRect(0,0,w,h);\n                me.get(\"actx\").clearRect(0,0,w,h);\n            },\n            cleanup: function(){\n                var me = this;\n                me.get(\"element\").removeChild(me.get(\"canvas\"));\n            }\n        };\n\n        return {\n            create: function(config){\n                return new heatmap(config);\n            }, \n            util: {\n                mousePosition: function(ev){\n                    // this doesn't work right\n                    // rather use\n                    /*\n                        // this = element to observe\n                        var x = ev.pageX - this.offsetLeft;\n                        var y = ev.pageY - this.offsetTop;\n\n                    */\n                    var x, y;\n\n                    if (ev.layerX) { // Firefox\n                        x = ev.layerX;\n                        y = ev.layerY;\n                    } else if (ev.offsetX) { // Opera\n                        x = ev.offsetX;\n                        y = ev.offsetY;\n                    }\n                    if(typeof(x)=='undefined')\n                        return;\n\n                    return [x,y];\n                }\n            }\n        };\n    })();\n\n    var HeatmapOverlay = function(opts) {\n        try {\n            BMap;\n        } catch (e) {\n            throw Error('Baidu Map JS API is not ready yet!');\n        }\n        if (!HeatmapOverlay._isExtended) {\n            HeatmapOverlay._isExtended = true;\n            inherits(HeatmapOverlay, BMap.Overlay, \"HeatmapOverlay\");\n            var newHeatmap = new HeatmapOverlay(opts);\n            this.__proto__ = newHeatmap.__proto__;\n        }\n        // HeatmapOverlay.prototype = new BMap.Overlay();\n        this.conf = opts;\n        this.heatmap = null;\n        this.latlngs = [];\n        this.bounds = null;\n        this._moveendHandler = this._moveendHandler.bind(this);\n    }\n\n    HeatmapOverlay.prototype.initialize = function(map) {\n        this._map = map;\n        var el = document.createElement(\"div\");\n        el.style.position = \"absolute\";\n        el.style.top = 0;\n        el.style.left = 0;\n        el.style.border = 0;\n        el.style.width = this._map.getSize().width + \"px\";\n        el.style.height = this._map.getSize().height + \"px\";\n        this.conf.element = el;\n        map.getPanes().mapPane.appendChild(el);\n        this.heatmap = heatmapFactory.create(this.conf);\n        this._div = el;\n        return el;\n    }\n\n    HeatmapOverlay.prototype.draw = function() {\n        var currentBounds = this._map.getBounds();\n\n        if (currentBounds.equals(this.bounds)) {\n            return;\n        }\n        this.bounds = currentBounds;\n\n        var ne = this._map.pointToOverlayPixel(currentBounds.getNorthEast()),\n            sw = this._map.pointToOverlayPixel(currentBounds.getSouthWest());\n        if (!ne || !sw) {\n            return\n        }\n        var topY = ne.y,\n            leftX = sw.x,\n            h = sw.y - ne.y,\n            w = ne.x - sw.x;\n\n        this.conf.element.style.left = leftX + 'px';\n        this.conf.element.style.top = topY + 'px';\n        this.conf.element.style.width = w + 'px';\n        this.conf.element.style.height = h + 'px';\n        this.heatmap.store.get(\"heatmap\").resize();\n\n        if (this.latlngs.length > 0) {\n            this.heatmap.clear();\n\n            var len = this.latlngs.length;\n            var d = {\n                max: this.heatmap.store.max,\n                data: []\n            };\n\n            while (len--) {\n                var latlng = this.latlngs[len].latlng;\n\n                if (!currentBounds.containsPoint(latlng)) {\n                    continue;\n                }\n\n                var divPixel = this._map.pointToOverlayPixel(latlng),\n                    screenPixel = new BMap.Pixel(divPixel.x - leftX, divPixel.y - topY);\n                var roundedPoint = this.pixelTransform(screenPixel);\n                d.data.push({\n                    x: roundedPoint.x,\n                    y: roundedPoint.y,\n                    count: this.latlngs[len].c\n                });\n            }\n            this.heatmap.store.setDataSet(d);\n        }\n    }\n\n    HeatmapOverlay.prototype.pixelTransform = function(p) {\n        var w = this.heatmap.get(\"width\"),\n            h = this.heatmap.get(\"height\");\n\n        while (p.x < 0) {\n            p.x += w;\n        }\n\n        while (p.x > w) {\n            p.x -= w;\n        }\n\n        while (p.y < 0) {\n            p.y += h;\n        }\n\n        while (p.y > h) {\n            p.y -= h;\n        }\n\n        p.x = (p.x >> 0);\n        p.y = (p.y >> 0);\n\n        return p;\n    }\n\n    HeatmapOverlay.prototype._moveendHandler = function (e) {\n        this.setDataSet(this._data);\n        delete this._data;\n        this._map.removeEventListener('moveend', this._moveendHandler);\n    }\n\n    HeatmapOverlay.prototype.setDataSet = function(data) {\n        if (!this._map) {\n            return;\n        }\n        var currentBounds = this._map.getBounds();\n\n        var ne = this._map.pointToOverlayPixel(currentBounds.getNorthEast()),\n            sw = this._map.pointToOverlayPixel(currentBounds.getSouthWest());\n        if (!ne || !sw) {\n            this._data = data\n            this._map.addEventListener('moveend', this._moveendHandler);\n        }\n\n        var mapdata = {\n            max: data.max,\n            data: []\n        };\n        var d = data.data,\n            dlen = d.length;\n\n\n        this.latlngs = [];\n\n        while (dlen--) {\n            var latlng = new BMap.Point(d[dlen].lng, d[dlen].lat);\n            this.latlngs.push({\n                latlng: latlng,\n                c: d[dlen].count\n            });\n\n            if (!currentBounds.containsPoint(latlng)) {\n                continue;\n            }\n\n            var divPixel = this._map.pointToOverlayPixel(latlng),\n                leftX = this._map.pointToOverlayPixel(currentBounds.getSouthWest()).x,\n                topY = this._map.pointToOverlayPixel(currentBounds.getNorthEast()).y,\n                screenPixel = new BMap.Pixel(divPixel.x - leftX, divPixel.y - topY);\n            var point = this.pixelTransform(screenPixel);\n\n            mapdata.data.push({\n                x: point.x,\n                y: point.y,\n                count: d[dlen].count\n            });\n        }\n        this.heatmap.clear();\n        this.heatmap.store.setDataSet(mapdata);\n    }\n\n    HeatmapOverlay.prototype.addDataPoint = function(lng, lat, count) {\n        var latlng = new BMap.Point(lng, lat),\n            point = this.pixelTransform(this._map.pointToOverlayPixel(latlng));\n\n        this.heatmap.store.addDataPoint(point.x, point.y, count);\n        this.latlngs.push({\n            latlng: latlng,\n            c: count\n        });\n    }\n\n    HeatmapOverlay.prototype.toggle = function() {\n        this.heatmap.toggleDisplay();\n    }\n\n    return HeatmapOverlay;\n});\n"],
  "mappings": "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",
  "names": ["store", "heatmap", "legend"]
}
