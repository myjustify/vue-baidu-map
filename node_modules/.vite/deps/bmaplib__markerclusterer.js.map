{
  "version": 3,
  "sources": ["../../bmaplib.markerclusterer/index.js"],
  "sourcesContent": ["(function (global, factory) {\n\ttypeof exports === 'object' && typeof module !== 'undefined' ? module.exports = factory() :\n\ttypeof define === 'function' && define.amd ? define(factory) :\n\t(global.BMapLib = global.BMapLib || {}, global.BMapLib.MarkerClusterer = factory());\n}(this, (function () { 'use strict';\n\nvar __commonjs_global = typeof window !== 'undefined' ? window : typeof global !== 'undefined' ? global : this;\nfunction __commonjs(fn, module) { return module = { exports: {} }, fn(module, module.exports, __commonjs_global), module.exports; }\n\n\nvar index$1 = __commonjs(function (module, exports, global) {\n(function (root, factory) {  \n    if (typeof exports === 'object') {  \n        module.exports = factory();\n    } else if (typeof define === 'function' && define.amd) {  \n        define(factory);  \n    } else {\n        root.BMapLib = root.BMapLib || {};\n        root.BMapLib.TextIconOverlay = root.BMapLib.TextIconOverlay || factory();  \n    }  \n})(__commonjs_global, function() {\n    var T,\n    baidu = T = baidu || {version: \"1.3.8\"}; \n    var context = {};\n    //提出guid，防止在与老版本Tangram混用时\n    //在下一行错误的修改context[undefined]\n    baidu.guid = \"$BAIDU$\";\n\n    //Tangram可能被放在闭包中\n    //一些页面级别唯一的属性，需要挂载在context[baidu.guid]上\n    context[baidu.guid] = context[baidu.guid] || {};\n\n    /**         \n    * @ignore\n    * @namespace baidu.dom 操作dom的方法。\n    */\n    baidu.dom = baidu.dom || {};\n\n    \n    /**\n     * 从文档中获取指定的DOM元素\n     * @name baidu.dom.g\n     * @function\n     * @grammar baidu.dom.g(id)\n     * @param {string|HTMLElement} id 元素的id或DOM元素\n     * @shortcut g,T.G\n     * @meta standard\n     * @see baidu.dom.q\n     *             \n     * @returns {HTMLElement|null} 获取的元素，查找不到时返回null,如果参数不合法，直接返回参数\n     */\n    baidu.dom.g = function (id) {\n        if ('string' == typeof id || id instanceof String) {\n            return document.getElementById(id);\n        } else if (id && id.nodeName && (id.nodeType == 1 || id.nodeType == 9)) {\n            return id;\n        }\n        return null;\n    };\n\n    // 声明快捷方法\n    baidu.g = baidu.G = baidu.dom.g;\n\n    /**\n     * 获取目标元素所属的document对象\n     * @name baidu.dom.getDocument\n     * @function\n     * @grammar baidu.dom.getDocument(element)\n     * @param {HTMLElement|string} element 目标元素或目标元素的id\n     * @meta standard\n     * @see baidu.dom.getWindow\n     *             \n     * @returns {HTMLDocument} 目标元素所属的document对象\n     */\n    baidu.dom.getDocument = function (element) {\n        element = baidu.dom.g(element);\n        return element.nodeType == 9 ? element : element.ownerDocument || element.document;\n    };\n\n    /**\n         * @ignore\n     * @namespace baidu.lang 对语言层面的封装，包括类型判断、模块扩展、继承基类以及对象自定义事件的支持。\n    */\n    baidu.lang = baidu.lang || {};\n\n    /**\n     * 判断目标参数是否string类型或String对象\n     * @name baidu.lang.isString\n     * @function\n     * @grammar baidu.lang.isString(source)\n     * @param {Any} source 目标参数\n     * @shortcut isString\n     * @meta standard\n     * @see baidu.lang.isObject,baidu.lang.isNumber,baidu.lang.isArray,baidu.lang.isElement,baidu.lang.isBoolean,baidu.lang.isDate\n     *             \n     * @returns {boolean} 类型判断结果\n     */\n    baidu.lang.isString = function (source) {\n        return '[object String]' == Object.prototype.toString.call(source);\n    };\n\n    // 声明快捷方法\n    baidu.isString = baidu.lang.isString;\n\n    /**\n     * 从文档中获取指定的DOM元素\n     * **内部方法**\n     * \n     * @param {string|HTMLElement} id 元素的id或DOM元素\n     * @meta standard\n     * @return {HTMLElement} DOM元素，如果不存在，返回null，如果参数不合法，直接返回参数\n     */\n    baidu.dom._g = function (id) {\n        if (baidu.lang.isString(id)) {\n            return document.getElementById(id);\n        }\n        return id;\n    };\n\n    // 声明快捷方法\n    baidu._g = baidu.dom._g;\n\n    /**\n     * @ignore\n     * @namespace baidu.browser 判断浏览器类型和特性的属性。\n     */\n    baidu.browser = baidu.browser || {};\n\n    if (/msie (\\d+\\.\\d)/i.test(navigator.userAgent)) {\n        //IE 8下，以documentMode为准\n        //在百度模板中，可能会有$，防止冲突，将$1 写成 \\x241\n        /**\n         * 判断是否为ie浏览器\n         * @property ie ie版本号\n         * @grammar baidu.browser.ie\n         * @meta standard\n         * @shortcut ie\n         * @see baidu.browser.firefox,baidu.browser.safari,baidu.browser.opera,baidu.browser.chrome,baidu.browser.maxthon \n         */\n        baidu.browser.ie = baidu.ie = document.documentMode || + RegExp['\\x241'];\n    }\n\n    /**\n     * 获取目标元素的computed style值。如果元素的样式值不能被浏览器计算，则会返回空字符串（IE）\n     *\n     * @author berg\n     * @name baidu.dom.getComputedStyle\n     * @function\n     * @grammar baidu.dom.getComputedStyle(element, key)\n     * @param {HTMLElement|string} element 目标元素或目标元素的id\n     * @param {string} key 要获取的样式名\n     *\n     * @see baidu.dom.getStyle\n     *             \n     * @returns {string} 目标元素的computed style值\n     */\n\n    baidu.dom.getComputedStyle = function(element, key){\n        element = baidu.dom._g(element);\n        var doc = baidu.dom.getDocument(element),\n            styles;\n        if (doc.defaultView && doc.defaultView.getComputedStyle) {\n            styles = doc.defaultView.getComputedStyle(element, null);\n            if (styles) {\n                return styles[key] || styles.getPropertyValue(key);\n            }\n        }\n        return ''; \n    };\n\n    /**\n     * 提供给setStyle与getStyle使用\n     */\n    baidu.dom._styleFixer = baidu.dom._styleFixer || {};\n\n    /**\n     * 提供给setStyle与getStyle使用\n     */\n    baidu.dom._styleFilter = baidu.dom._styleFilter || [];\n\n    /**\n     * 为获取和设置样式的过滤器\n     * @private\n     * @meta standard\n     */\n    baidu.dom._styleFilter.filter = function (key, value, method) {\n        for (var i = 0, filters = baidu.dom._styleFilter, filter; filter = filters[i]; i++) {\n            if (filter = filter[method]) {\n                value = filter(key, value);\n            }\n        }\n        return value;\n    };\n\n    /**\n         * @ignore\n     * @namespace baidu.string 操作字符串的方法。\n     */\n    baidu.string = baidu.string || {};\n\n    /**\n     * 将目标字符串进行驼峰化处理\n     * @name baidu.string.toCamelCase\n     * @function\n     * @grammar baidu.string.toCamelCase(source)\n     * @param {string} source 目标字符串\n     * @remark\n     * 支持单词以“-_”分隔\n     * @meta standard\n     *             \n     * @returns {string} 驼峰化处理后的字符串\n     */\n    baidu.string.toCamelCase = function (source) {\n        //提前判断，提高getStyle等的效率 thanks xianwei\n        if (source.indexOf('-') < 0 && source.indexOf('_') < 0) {\n            return source;\n        }\n        return source.replace(/[-_][^-_]/g, function (match) {\n            return match.charAt(1).toUpperCase();\n        });\n    };\n\n    /**\n     * 获取目标元素的样式值\n     * @name baidu.dom.getStyle\n     * @function\n     * @grammar baidu.dom.getStyle(element, key)\n     * @param {HTMLElement|string} element 目标元素或目标元素的id\n     * @param {string} key 要获取的样式名\n     * @remark\n     * \n     * 为了精简代码，本模块默认不对任何浏览器返回值进行归一化处理（如使用getStyle时，不同浏览器下可能返回rgb颜色或hex颜色），也不会修复浏览器的bug和差异性（如设置IE的float属性叫styleFloat，firefox则是cssFloat）。<br />\n     * baidu.dom._styleFixer和baidu.dom._styleFilter可以为本模块提供支持。<br />\n     * 其中_styleFilter能对颜色和px进行归一化处理，_styleFixer能对display，float，opacity，textOverflow的浏览器兼容性bug进行处理。\t\n     * @shortcut getStyle\n     * @meta standard\n     * @see baidu.dom.setStyle,baidu.dom.setStyles, baidu.dom.getComputedStyle\n     *             \n     * @returns {string} 目标元素的样式值\n     */\n    baidu.dom.getStyle = function (element, key) {\n        var dom = baidu.dom;\n\n        element = dom.g(element);\n        key = baidu.string.toCamelCase(key);\n        //computed style, then cascaded style, then explicitly set style.\n        var value = element.style[key] ||\n                    (element.currentStyle ? element.currentStyle[key] : \"\") || \n                    dom.getComputedStyle(element, key);\n\n        // 在取不到值的时候，用fixer进行修正\n        if (!value) {\n            var fixer = dom._styleFixer[key];\n            if(fixer){\n                value = fixer.get ? fixer.get(element) : baidu.dom.getStyle(element, fixer);\n            }\n        }\n\n        /* 检查结果过滤器 */\n        if (fixer = dom._styleFilter) {\n            value = fixer.filter(key, value, 'get');\n        }\n\n        return value;\n    };\n\n    // 声明快捷方法\n    baidu.getStyle = baidu.dom.getStyle;\n\n\n    if (/opera\\/(\\d+\\.\\d)/i.test(navigator.userAgent)) {\n    /**\n     * 判断是否为opera浏览器\n     * @property opera opera版本号\n     * @grammar baidu.browser.opera\n     * @meta standard\n     * @see baidu.browser.ie,baidu.browser.firefox,baidu.browser.safari,baidu.browser.chrome \n     */\n        baidu.browser.opera = + RegExp['\\x241'];\n    }\n\n    /**\n     * 判断是否为webkit内核\n     * @property isWebkit \n     * @grammar baidu.browser.isWebkit\n     * @meta standard\n     * @see baidu.browser.isGecko\n     */\n    baidu.browser.isWebkit = /webkit/i.test(navigator.userAgent);\n\n    /**\n     * 判断是否为gecko内核\n     * @property isGecko \n     * @grammar baidu.browser.isGecko\n     * @meta standard\n     * @see baidu.browser.isWebkit\n     */\n    baidu.browser.isGecko = /gecko/i.test(navigator.userAgent) && !/like gecko/i.test(navigator.userAgent);\n\n    /**\n     * 判断是否严格标准的渲染模式\n     * @property isStrict \n     * @grammar baidu.browser.isStrict\n     * @meta standard\n     */\n    baidu.browser.isStrict = document.compatMode == \"CSS1Compat\";\n\n    /**\n     * 获取目标元素相对于整个文档左上角的位置\n     * @name baidu.dom.getPosition\n     * @function\n     * @grammar baidu.dom.getPosition(element)\n     * @param {HTMLElement|string} element 目标元素或目标元素的id\n     * @meta standard\n     *             \n     * @returns {Object} 目标元素的位置，键值为top和left的Object。\n     */\n    baidu.dom.getPosition = function (element) {\n        element = baidu.dom.g(element);\n        var doc = baidu.dom.getDocument(element), \n            browser = baidu.browser,\n            getStyle = baidu.dom.getStyle,\n        // Gecko 1.9版本以下用getBoxObjectFor计算位置\n        // 但是某些情况下是有bug的\n        // 对于这些有bug的情况\n        // 使用递归查找的方式\n            BUGGY_GECKO_BOX_OBJECT = browser.isGecko > 0 && \n                                        doc.getBoxObjectFor &&\n                                        getStyle(element, 'position') == 'absolute' &&\n                                        (element.style.top === '' || element.style.left === ''),\n            pos = {\"left\":0,\"top\":0},\n            viewport = (browser.ie && !browser.isStrict) ? doc.body : doc.documentElement,\n            parent,\n            box;\n\n        if(element == viewport){\n            return pos;\n        }\n\n        if(element.getBoundingClientRect){ // IE and Gecko 1.9+\n    \n            //当HTML或者BODY有border width时, 原生的getBoundingClientRect返回值是不符合预期的\n            //考虑到通常情况下 HTML和BODY的border只会设成0px,所以忽略该问题.\n            box = element.getBoundingClientRect();\n\n            pos.left = Math.floor(box.left) + Math.max(doc.documentElement.scrollLeft, doc.body.scrollLeft);\n            pos.top  = Math.floor(box.top)  + Math.max(doc.documentElement.scrollTop,  doc.body.scrollTop);\n    \n            // IE会给HTML元素添加一个border，默认是medium（2px）\n            // 但是在IE 6 7 的怪异模式下，可以被html { border: 0; } 这条css规则覆盖\n            // 在IE7的标准模式下，border永远是2px，这个值通过clientLeft 和 clientTop取得\n            // 但是。。。在IE 6 7的怪异模式，如果用户使用css覆盖了默认的medium\n            // clientTop和clientLeft不会更新\n            pos.left -= doc.documentElement.clientLeft;\n            pos.top  -= doc.documentElement.clientTop;\n    \n            var htmlDom = doc.body,\n                // 在这里，不使用element.style.borderLeftWidth，只有computedStyle是可信的\n                htmlBorderLeftWidth = parseInt(getStyle(htmlDom, 'borderLeftWidth')),\n                htmlBorderTopWidth = parseInt(getStyle(htmlDom, 'borderTopWidth'));\n            if(browser.ie && !browser.isStrict){\n                pos.left -= isNaN(htmlBorderLeftWidth) ? 2 : htmlBorderLeftWidth;\n                pos.top  -= isNaN(htmlBorderTopWidth) ? 2 : htmlBorderTopWidth;\n            }\n        } else { \n            // safari/opera/firefox\n            parent = element;\n\n            do {\n                pos.left += parent.offsetLeft;\n                pos.top  += parent.offsetTop;\n    \n                // safari里面，如果遍历到了一个fixed的元素，后面的offset都不准了\n                if (browser.isWebkit > 0 && getStyle(parent, 'position') == 'fixed') {\n                    pos.left += doc.body.scrollLeft;\n                    pos.top  += doc.body.scrollTop;\n                    break;\n                }\n        \n                parent = parent.offsetParent;\n            } while (parent && parent != element);\n\n            // 对body offsetTop的修正\n            if(browser.opera > 0 || (browser.isWebkit > 0 && getStyle(element, 'position') == 'absolute')){\n                pos.top  -= doc.body.offsetTop;\n            }\n\n            // 计算除了body的scroll\n            parent = element.offsetParent;\n            while (parent && parent != doc.body) {\n                pos.left -= parent.scrollLeft;\n                // see https://bugs.opera.com/show_bug.cgi?id=249965\n                if (!browser.opera || parent.tagName != 'TR') {\n                    pos.top -= parent.scrollTop;\n                }\n                parent = parent.offsetParent;\n            }\n        }\n\n        return pos;\n    };\n\n    /**\n     * @ignore\n     * @namespace baidu.event 屏蔽浏览器差异性的事件封装。\n     * @property target \t事件的触发元素\n     * @property pageX \t\t鼠标事件的鼠标x坐标\n     * @property pageY \t\t鼠标事件的鼠标y坐标\n     * @property keyCode \t键盘事件的键值\n     */\n    baidu.event = baidu.event || {};\n\n    /**\n     * 事件监听器的存储表\n     * @private\n     * @meta standard\n     */\n    baidu.event._listeners = baidu.event._listeners || [];\n\n    /**\n     * 为目标元素添加事件监听器\n     * @name baidu.event.on\n     * @function\n     * @grammar baidu.event.on(element, type, listener)\n     * @param {HTMLElement|string|window} element 目标元素或目标元素id\n     * @param {string} type 事件类型\n     * @param {Function} listener 需要添加的监听器\n     * @remark\n     * \n    1. 不支持跨浏览器的鼠标滚轮事件监听器添加<br>\n    2. 改方法不为监听器灌入事件对象，以防止跨iframe事件挂载的事件对象获取失败\n\n        * @shortcut on\n        * @meta standard\n        * @see baidu.event.un\n        *             \n        * @returns {HTMLElement|window} 目标元素\n        */\n    baidu.event.on = function (element, type, listener) {\n        type = type.replace(/^on/i, '');\n        element = baidu.dom._g(element);\n\n        var realListener = function (ev) {\n                // 1. 这里不支持EventArgument,  原因是跨frame的事件挂载\n                // 2. element是为了修正this\n                listener.call(element, ev);\n            },\n            lis = baidu.event._listeners,\n            filter = baidu.event._eventFilter,\n            afterFilter,\n            realType = type;\n        type = type.toLowerCase();\n        // filter过滤\n        if(filter && filter[type]){\n            afterFilter = filter[type](element, type, realListener);\n            realType = afterFilter.type;\n            realListener = afterFilter.listener;\n        }\n\n        // 事件监听器挂载\n        if (element.addEventListener) {\n            element.addEventListener(realType, realListener, false);\n        } else if (element.attachEvent) {\n            element.attachEvent('on' + realType, realListener);\n        }\n\n        // 将监听器存储到数组中\n        lis[lis.length] = [element, type, listener, realListener, realType];\n        return element;\n    };\n\n    // 声明快捷方法\n    baidu.on = baidu.event.on;\n\n    /**\n     * 返回一个当前页面的唯一标识字符串。\n     * @name baidu.lang.guid\n     * @function\n     * @grammar baidu.lang.guid()\n     * @version 1.1.1\n     * @meta standard\n     *             \n     * @returns {String} 当前页面的唯一标识字符串\n     */\n\n    (function(){\n        //不直接使用window，可以提高3倍左右性能\n        var guid = context[baidu.guid];\n\n        baidu.lang.guid = function() {\n            return \"TANGRAM__\" + (guid._counter ++).toString(36);\n        };\n\n        guid._counter = guid._counter || 1;\n    })();\n\n    /**\n     * 所有类的实例的容器\n     * key为每个实例的guid\n     * @meta standard\n     */\n\n    context[baidu.guid]._instances = context[baidu.guid]._instances || {};\n\n    /**\n     * 判断目标参数是否为function或Function实例\n     * @name baidu.lang.isFunction\n     * @function\n     * @grammar baidu.lang.isFunction(source)\n     * @param {Any} source 目标参数\n     * @version 1.2\n     * @see baidu.lang.isString,baidu.lang.isObject,baidu.lang.isNumber,baidu.lang.isArray,baidu.lang.isElement,baidu.lang.isBoolean,baidu.lang.isDate\n     * @meta standard\n     * @returns {boolean} 类型判断结果\n     */\n    baidu.lang.isFunction = function (source) {\n        // chrome下,'function' == typeof /a/ 为true.\n        return '[object Function]' == Object.prototype.toString.call(source);\n    };\n\n    /**\n     *    \n     * @ignore\n     * @class  Tangram继承机制提供的一个基类，用户可以通过继承baidu.lang.Class来获取它的属性及方法。\n     * @name \tbaidu.lang.Class\n     * @grammar baidu.lang.Class(guid)\n     * @param \t{string}\tguid\t对象的唯一标识\n     * @meta standard\n     * @remark baidu.lang.Class和它的子类的实例均包含一个全局唯一的标识guid。guid是在构造函数中生成的，因此，继承自baidu.lang.Class的类应该直接或者间接调用它的构造函数。<br>baidu.lang.Class的构造函数中产生guid的方式可以保证guid的唯一性，及每个实例都有一个全局唯一的guid。\n     * @meta standard\n     * @see baidu.lang.inherits,baidu.lang.Event\n     */\n    baidu.lang.Class = function(guid) {\n        this.guid = guid || baidu.lang.guid();\n        context[baidu.guid]._instances[this.guid] = this;\n    };\n    context[baidu.guid]._instances = context[baidu.guid]._instances || {};\n\n    /**\n     * 释放对象所持有的资源，主要是自定义事件。\n     * @name dispose\n     * @grammar obj.dispose()\n     */\n    baidu.lang.Class.prototype.dispose = function(){\n        delete context[baidu.guid]._instances[this.guid];\n\n        for(var property in this){\n            if (!baidu.lang.isFunction(this[property])) {\n                delete this[property];\n            }\n        }\n        this.disposed = true;\n    };\n\n    /**\n     * 重载了默认的toString方法，使得返回信息更加准确一些。\n     * @return {string} 对象的String表示形式\n     */\n    baidu.lang.Class.prototype.toString = function(){\n        return \"[object \" + (this._className || \"Object\" ) + \"]\";\n    };\n\n    /**\n     * @ignore\n     * @class   自定义的事件对象。\n     * @name \tbaidu.lang.Event\n     * @grammar baidu.lang.Event(type[, target])\n     * @param \t{string} type\t 事件类型名称。为了方便区分事件和一个普通的方法，事件类型名称必须以\"on\"(小写)开头。\n     * @param \t{Object} [target]触发事件的对象\n     * @meta standard\n     * @remark 引入该模块，会自动为Class引入3个事件扩展方法：addEventListener、removeEventListener和dispatchEvent。\n     * @meta standard\n     * @see baidu.lang.Class\n     */\n    baidu.lang.Event = function (type, target) {\n        this.type = type;\n        this.returnValue = true;\n        this.target = target || null;\n        this.currentTarget = null;\n    };\n\n    /**\n     * 注册对象的事件监听器。引入baidu.lang.Event后，Class的子类实例才会获得该方法。\n     * @grammar obj.addEventListener(type, handler[, key])\n     * @param \t{string}   type         自定义事件的名称\n     * @param \t{Function} handler      自定义事件被触发时应该调用的回调函数\n     * @param \t{string}   [key]\t\t为事件监听函数指定的名称，可在移除时使用。如果不提供，方法会默认为它生成一个全局唯一的key。\n     * @remark \t事件类型区分大小写。如果自定义事件名称不是以小写\"on\"开头，该方法会给它加上\"on\"再进行判断，即\"click\"和\"onclick\"会被认为是同一种事件。 \n     */\n    baidu.lang.Class.prototype.addEventListener = function (type, handler, key) {\n        if (!baidu.lang.isFunction(handler)) {\n            return;\n        }\n\n        !this.__listeners && (this.__listeners = {});\n\n        var t = this.__listeners, id;\n        if (typeof key == \"string\" && key) {\n            if (/[^\\w\\-]/.test(key)) {\n                throw(\"nonstandard key:\" + key);\n            } else {\n                handler.hashCode = key; \n                id = key;\n            }\n        }\n        type.indexOf(\"on\") != 0 && (type = \"on\" + type);\n\n        typeof t[type] != \"object\" && (t[type] = {});\n        id = id || baidu.lang.guid();\n        handler.hashCode = id;\n        t[type][id] = handler;\n    };\n\n    /**\n     * 移除对象的事件监听器。引入baidu.lang.Event后，Class的子类实例才会获得该方法。\n     * @grammar obj.removeEventListener(type, handler)\n     * @param {string}   type     事件类型\n     * @param {Function|string} handler  要移除的事件监听函数或者监听函数的key\n     * @remark \t如果第二个参数handler没有被绑定到对应的自定义事件中，什么也不做。\n     */\n    baidu.lang.Class.prototype.removeEventListener = function (type, handler) {\n        if (typeof handler != \"undefined\") {\n            if ( (baidu.lang.isFunction(handler) && ! (handler = handler.hashCode))\n                || (! baidu.lang.isString(handler))\n            ){\n                return;\n            }\n        }\n\n        !this.__listeners && (this.__listeners = {});\n\n        type.indexOf(\"on\") != 0 && (type = \"on\" + type);\n\n        var t = this.__listeners;\n        if (!t[type]) {\n            return;\n        }\n        if (typeof handler != \"undefined\") {\n            t[type][handler] && delete t[type][handler];\n        } else {\n            for(var guid in t[type]){\n                delete t[type][guid];\n            }\n        }\n    };\n\n    /**\n     * 派发自定义事件，使得绑定到自定义事件上面的函数都会被执行。引入baidu.lang.Event后，Class的子类实例才会获得该方法。\n     * @grammar obj.dispatchEvent(event, options)\n     * @param {baidu.lang.Event|String} event \tEvent对象，或事件名称(1.1.1起支持)\n     * @param {Object} \t\t\t\t\toptions 扩展参数,所含属性键值会扩展到Event对象上(1.2起支持)\n     * @remark 处理会调用通过addEventListenr绑定的自定义事件回调函数之外，还会调用直接绑定到对象上面的自定义事件。例如：<br>\n    myobj.onMyEvent = function(){}<br>\n    myobj.addEventListener(\"onMyEvent\", function(){});\n        */\n    baidu.lang.Class.prototype.dispatchEvent = function (event, options) {\n        if (baidu.lang.isString(event)) {\n            event = new baidu.lang.Event(event);\n        }\n        !this.__listeners && (this.__listeners = {});\n\n        // 20100603 添加本方法的第二个参数，将 options extend到event中去传递\n        options = options || {};\n        for (var i in options) {\n            event[i] = options[i];\n        }\n\n        var i, t = this.__listeners, p = event.type;\n        event.target = event.target || this;\n        event.currentTarget = this;\n\n        p.indexOf(\"on\") != 0 && (p = \"on\" + p);\n\n        baidu.lang.isFunction(this[p]) && this[p].apply(this, arguments);\n\n        if (typeof t[p] == \"object\") {\n            for (i in t[p]) {\n                t[p][i].apply(this, arguments);\n            }\n        }\n        return event.returnValue;\n    };\n\n\n    baidu.lang.inherits = function (subClass, superClass, className) {\n        var key, proto,\n            selfProps = subClass.prototype,\n            clazz = new Function();\n\n        clazz.prototype = superClass.prototype;\n        proto = subClass.prototype = new clazz();\n        for (key in selfProps) {\n            proto[key] = selfProps[key];\n        }\n        subClass.prototype.constructor = subClass;\n        subClass.superClass = superClass.prototype;\n\n        // 类名标识，兼容Class的toString，基本没用\n        if (\"string\" == typeof className) {\n            proto._className = className;\n        }\n    };\n    // 声明快捷方法\n    baidu.inherits = baidu.lang.inherits;\n\n\n    /**\n    \n     * 图片的路径\n\n     * @private\n     * @type {String}\n    \n     */\n    var _IMAGE_PATH = 'http://api.map.baidu.com/library/TextIconOverlay/1.2/src/images/m';\n\n    /**\n    \n     * 图片的后缀名\n\n      * @private\n     * @type {String}\n    \n     */\n    var _IMAGE_EXTENSION  = 'png';\n\n    /**\n     *@exports TextIconOverlay as BMapLib.TextIconOverlay\n     */\n    \n    /**\n    * TextIconOverlay\n    * @class 此类表示地图上的一个覆盖物，该覆盖物由文字和图标组成，从Overlay继承。文字通常是数字（0-9）或字母（A-Z ），而文字与图标之间有一定的映射关系。\n    *该覆盖物适用于以下类似的场景：需要在地图上添加一系列覆盖物，这些覆盖物之间用不同的图标和文字来区分，文字可能表示了该覆盖物的某一属性值，根据该文字和一定的映射关系，自动匹配相应颜色和大小的图标。\n    *\n    *@constructor\n    *@param {Point} position 表示一个经纬度坐标位置。\n    *@param {String} text 表示该覆盖物显示的文字信息。\n    *@param {Json Object} options 可选参数，可选项包括：<br />\n    *\"<b>styles</b>\":{Array<IconStyle>} 一组图标风格。单个图表风格包括以下几个属性：<br />\n    *   url\t{String}\t 图片的url地址。(必选)<br />\n    *   size {Size}\t图片的大小。（必选）<br />\n    *   anchor {Size} 图标定位在地图上的位置相对于图标左上角的偏移值，默认偏移值为图标的中心位置。（可选）<br />\n    *   offset {Size} 图片相对于可视区域的偏移值，此功能的作用等同于CSS中的background-position属性。（可选）<br />\n    *   textSize {Number} 文字的大小。（可选，默认10）<br />\n    *   textColor {String} 文字的颜色。（可选，默认black）<br />\n    */\n    var TextIconOverlay = function(position, text, options){\n        try {\n            BMap;\n        } catch (e) {\n            throw Error('Baidu Map JS API is not ready yet!');\n        }\n        T.lang.inherits(TextIconOverlay, BMap.Overlay, \"TextIconOverlay\");\n        this._position = position;\n        this._text = text;\n        this._options = options || {};\n        this._styles = this._options['styles'] || [];\n        (!this._styles.length) && this._setupDefaultStyles();                  \n    };\n\n\n    TextIconOverlay.prototype._setupDefaultStyles = function(){  \n        var sizes = [53, 56, 66, 78, 90];\n        for(var i = 0, size; size = sizes[i]; i++){\n            this._styles.push({\n                url:_IMAGE_PATH + i + '.' + _IMAGE_EXTENSION,\n                size: new BMap.Size(size, size)\n            });\n        }//for循环的简洁写法\n    };\n\n    /**\n    *继承Overlay的intialize方法，自定义覆盖物时必须。\n    *@param {Map} map BMap.Map的实例化对象。\n    *@return {HTMLElement} 返回覆盖物对应的HTML元素。\n    */\n    TextIconOverlay.prototype.initialize = function(map){\n        this._map = map;\n    \n        this._domElement = document.createElement('div');     \n        this._updateCss();    \n        this._updateText();\n        this._updatePosition(); \n        \n        this._bind();\n\n        this._map.getPanes().markerMouseTarget.appendChild(this._domElement);\n        return this._domElement;   \n    };\n\n    /**\n    *继承Overlay的draw方法，自定义覆盖物时必须。\n    *@return 无返回值。\n    */\n    TextIconOverlay.prototype.draw = function(){\n        this._map && this._updatePosition();\n    };\n    \n    /**\n    *获取该覆盖物上的文字。\n    *@return {String} 该覆盖物上的文字。\n    */\n    TextIconOverlay.prototype.getText = function(){\n        return this._text;\n    };\n\n    /**\n    *设置该覆盖物上的文字。\n    *@param {String} text 要设置的文字，通常是字母A-Z或数字0-9。\n    *@return 无返回值。\n    */\n    TextIconOverlay.prototype.setText = function(text){\n        if(text && (!this._text || (this._text.toString() != text.toString()))){\n            this._text = text;\n            this._updateText();\n            this._updateCss();\n            this._updatePosition(); \n        }\n    };\n\n    /**\n    *获取该覆盖物的位置。\n    *@return {Point} 该覆盖物的经纬度坐标。\n    */\n    TextIconOverlay.prototype.getPosition = function () {\n        return this._position;\n    };\n   \n    /**\n    *设置该覆盖物的位置。\n    *@param {Point}  position 要设置的经纬度坐标。\n    *@return 无返回值。\n    */\n    TextIconOverlay.prototype.setPosition = function (position) {\n        if(position && (!this._position || !this._position.equals(position))){\n            this._position = position;  \n            this._updatePosition();\n        }\n    };\n\n    /**\n    *由文字信息获取风格数组的对应索引值。\n    *内部默认的对应函数为文字转换为数字除以10的结果，比如文字8返回索引0，文字25返回索引2.\n    *如果需要自定义映射关系，请覆盖该函数。\n    *@param {String} text  文字。\n    *@param {Array<IconStyle>}  styles 一组图标风格。\n    *@return {Number} 对应的索引值。\n    */\n    TextIconOverlay.prototype.getStyleByText = function(text, styles){\n        var count = parseInt(text);\n        var index = parseInt(count / 10);\n        index = Math.max(0, index);\n        index = Math.min(index, styles.length - 1);\n        return styles[index]; \n    };\n\n    /**\n    *更新相应的CSS。\n    *@return 无返回值。\n    */\n    TextIconOverlay.prototype._updateCss = function(){\n        if (!this._domElement) {\n            return\n        }\n        var style = this.getStyleByText(this._text, this._styles);\n        this._domElement.style.cssText = this._buildCssText(style);\n    };\n\n    /**\n    *更新覆盖物的显示文字。\n    *@return 无返回值。\n    */\n    TextIconOverlay.prototype._updateText = function(){\n        if (this._domElement) {\n            this._domElement.innerHTML = this._text;\n        }\n    };\n\n    /**\n    *调整覆盖物在地图上的位置更新覆盖物的显示文字。\n    *@return 无返回值。\n    */\n    TextIconOverlay.prototype._updatePosition = function(){\n        if (this._domElement && this._position) {\n            var style = this._domElement.style;\n            var pixelPosition= this._map.pointToOverlayPixel(this._position); \n            pixelPosition.x -= Math.ceil(parseInt(style.width) / 2);\n            pixelPosition.y -= Math.ceil(parseInt(style.height) / 2);       \n            style.left = pixelPosition.x + \"px\";\n            style.top = pixelPosition.y + \"px\";\n        }\n    };\n    \n    /**\n    * 为该覆盖物的HTML元素构建CSS\n    * @param {IconStyle}  一个图标的风格。\n    * @return {String} 构建完成的CSSTEXT。\n    */\n    TextIconOverlay.prototype._buildCssText = function(style) {    \n        //根据style来确定一些默认值\n        var url = style['url'];\n        var size = style['size'];\n        var anchor = style['anchor'];\n        var offset = style['offset'];\n        var textColor = style['textColor'] || 'black';\n        var textSize = style['textSize'] || 10;\n\n        var csstext = [];\n        if (T.browser[\"ie\"] < 7) {\n            csstext.push('filter:progid:DXImageTransform.Microsoft.AlphaImageLoader(' +\n                'sizingMethod=scale,src=\"' + url + '\");');\n        } else {\n            csstext.push('background-image:url(' + url + ');');\n            var backgroundPosition = '0 0';\n            (offset instanceof BMap.Size) && (backgroundPosition = offset.width + 'px' + ' ' + offset.height + 'px');          \n            csstext.push('background-position:' + backgroundPosition + ';');\n        }\n\n        if (size instanceof BMap.Size){\n            if (anchor instanceof BMap.Size) {\n                if (anchor.height > 0 && anchor.height < size.height) {\n                      csstext.push('height:' + (size.height - anchor.height) + 'px; padding-top:' + anchor.height + 'px;');\n                }\n                if(anchor.width > 0 && anchor.width < size.width){\n                    csstext.push('width:' + (size.width - anchor.width) + 'px; padding-left:' + anchor.width + 'px;');                \n                }\n            } else {\n                csstext.push('height:' + size.height + 'px; line-height:' + size.height + 'px;');\n                csstext.push('width:' + size.width + 'px; text-align:center;');\n            }\n        }\n   \n        csstext.push('cursor:pointer; color:' + textColor + '; position:absolute; font-size:' +\n            textSize + 'px; font-family:Arial,sans-serif; font-weight:bold');\n        return csstext.join('');\n    };\n\n\n    /**\n    \n     * 当鼠标点击该覆盖物时会触发该事件\n\n     * @name TextIconOverlay#click\n\n     * @event\n\n     * @param {Event Object} e 回调函数会返回event参数，包括以下返回值：\n    \n     * <br />\"<b>type</b> : {String} 事件类型\n\n     * <br />\"<b>target</b>：{BMapLib.TextIconOverlay} 事件目标\n\n     *\n\n     */\n\n    /**\n\n     * 当鼠标进入该覆盖物区域时会触发该事件\n\n     * @name TextIconOverlay#mouseover\n\n     * @event\n     * @param {Event Object} e 回调函数会返回event参数，包括以下返回值：\n    \n     * <br />\"<b>type</b> : {String} 事件类型\n\n     * <br />\"<b>target</b>：{BMapLib.TextIconOverlay} 事件目标\n\n     * <br />\"<b>point</b> : {BMap.Point} 最新添加上的节点BMap.Point对象\n\n     * <br />\"<b>pixel</b>：{BMap.pixel} 最新添加上的节点BMap.Pixel对象\n\n     *\n\n     * @example <b>参考示例：</b><br />\n\n     * myTextIconOverlay.addEventListener(\"mouseover\", function(e) {  alert(e.point);  });\n\n     */\n\n    /**\n\n     * 当鼠标离开该覆盖物区域时会触发该事件\n\n     * @name TextIconOverlay#mouseout\n\n     * @event\n\n     * @param {Event Object} e 回调函数会返回event参数，包括以下返回值：\n\n     * <br />\"<b>type</b> : {String} 事件类型\n\n     * <br />\"<b>target</b>：{BMapLib.TextIconOverlay} 事件目标\n\n     * <br />\"<b>point</b> : {BMap.Point} 最新添加上的节点BMap.Point对象\n\n     * <br />\"<b>pixel</b>：{BMap.pixel} 最新添加上的节点BMap.Pixel对象\n\n     *\n\n     * @example <b>参考示例：</b><br />\n\n     * myTextIconOverlay.addEventListener(\"mouseout\", function(e) {  alert(e.point);  });\n\n     */\n\n\n    /**\n    * 为该覆盖物绑定一系列事件\n    * 当前支持click mouseover mouseout\n    * @return 无返回值。\n    */\n    TextIconOverlay.prototype._bind = function(){\n        if (!this._domElement){\n            return;\n        }\n\n        var me = this;\n        var map = this._map;\n\n        var BaseEvent = T.lang.Event;\n        function eventExtend(e, be){\n            var elem = e.srcElement || e.target;\n            var x = e.clientX || e.pageX;\n            var y = e.clientY || e.pageY;\n            if (e && be && x && y && elem){\n                var offset = T.dom.getPosition(map.getContainer());\n                be.pixel = new BMap.Pixel(x - offset.left, y - offset.top);\n                be.point = map.pixelToPoint(be.pixel);\n            }\n            return be;\n        }//给事件参数增加pixel和point两个值\n\n        T.event.on(this._domElement,\"mouseover\", function(e){\n            me.dispatchEvent(eventExtend(e, new BaseEvent(\"onmouseover\")));\n        });\n        T.event.on(this._domElement,\"mouseout\", function(e){\n            me.dispatchEvent(eventExtend(e, new BaseEvent(\"onmouseout\")));\n        });\n        T.event.on(this._domElement,\"click\", function(e){\n            me.dispatchEvent(eventExtend(e, new BaseEvent(\"onclick\")));\n        });\n    };\n\n    return TextIconOverlay;\n});\n});\n\nvar TextIconOverlay = (index$1 && typeof index$1 === 'object' && 'default' in index$1 ? index$1['default'] : index$1);\n\n/**\n * 获取一个扩展的视图范围，把上下左右都扩大一样的像素值。\n * @param {Map} map BMap.Map的实例化对象\n * @param {BMap.Bounds} bounds BMap.Bounds的实例化对象\n * @param {Number} gridSize 要扩大的像素值\n *\n * @return {BMap.Bounds} 返回扩大后的视图范围。\n */\nvar getExtendedBounds = function(map, bounds, gridSize){\n    bounds = cutBoundsInRange(bounds);\n    var pixelNE = map.pointToPixel(bounds.getNorthEast());\n    var pixelSW = map.pointToPixel(bounds.getSouthWest()); \n    pixelNE.x += gridSize;\n    pixelNE.y -= gridSize;\n    pixelSW.x -= gridSize;\n    pixelSW.y += gridSize;\n    var newNE = map.pixelToPoint(pixelNE);\n    var newSW = map.pixelToPoint(pixelSW);\n    return new BMap.Bounds(newSW, newNE);\n};\n\n/**\n * 按照百度地图支持的世界范围对bounds进行边界处理\n * @param {BMap.Bounds} bounds BMap.Bounds的实例化对象\n *\n * @return {BMap.Bounds} 返回不越界的视图范围\n */\nvar cutBoundsInRange = function (bounds) {\n    var maxX = getRange(bounds.getNorthEast().lng, -180, 180);\n    var minX = getRange(bounds.getSouthWest().lng, -180, 180);\n    var maxY = getRange(bounds.getNorthEast().lat, -74, 74);\n    var minY = getRange(bounds.getSouthWest().lat, -74, 74);\n    return new BMap.Bounds(new BMap.Point(minX, minY), new BMap.Point(maxX, maxY));\n}; \n\n/**\n * 对单个值进行边界处理。\n * @param {Number} i 要处理的数值\n * @param {Number} min 下边界值\n * @param {Number} max 上边界值\n * \n * @return {Number} 返回不越界的数值\n */\nvar getRange = function (i, mix, max) {\n    mix && (i = Math.max(i, mix));\n    max && (i = Math.min(i, max));\n    return i;\n};\n\n/**\n * 判断给定的对象是否为数组\n * @param {Object} source 要测试的对象\n *\n * @return {Boolean} 如果是数组返回true，否则返回false\n */\nvar isArray = function (source) {\n    return '[object Array]' === Object.prototype.toString.call(source);\n};\n\n/**\n * 返回item在source中的索引位置\n * @param {Object} item 要测试的对象\n * @param {Array} source 数组\n *\n * @return {Number} 如果在数组内，返回索引，否则返回-1\n */\nvar indexOf = function(item, source){\n    var index = -1;\n    if(isArray(source)){\n        if (source.indexOf) {\n            index = source.indexOf(item);\n        } else {\n            for (var i = 0, m; m = source[i]; i++) {\n                if (m === item) {\n                    index = i;\n                    break;\n                }\n            }\n        }\n    }        \n    return index;\n};\n\n/**\n *@exports MarkerClusterer as BMapLib.MarkerClusterer\n */\n\n    /**\n     * MarkerClusterer\n     * @class 用来解决加载大量点要素到地图上产生覆盖现象的问题，并提高性能\n     * @constructor\n     * @param {Map} map 地图的一个实例。\n     * @param {Json Object} options 可选参数，可选项包括：<br />\n     *    markers {Array<Marker>} 要聚合的标记数组<br />\n     *    girdSize {Number} 聚合计算时网格的像素大小，默认60<br />\n     *    maxZoom {Number} 最大的聚合级别，大于该级别就不进行相应的聚合<br />\n     *    minClusterSize {Number} 最小的聚合数量，小于该数量的不能成为一个聚合，默认为2<br />\n     *    isAverangeCenter {Boolean} 聚合点的落脚位置是否是所有聚合在内点的平均值，默认为否，落脚在聚合内的第一个点<br />\n     *    styles {Array<IconStyle>} 自定义聚合后的图标风格，请参考TextIconOverlay类<br />\n     */\nvar MarkerClusterer  = function(map, options){\n    try {\n        BMap;\n    } catch (e) {\n        throw Error('Baidu Map JS API is not ready yet!');\n    }\n    if (!map){\n        return;\n    }\n    this._map = map;\n    this._markers = [];\n    this._clusters = [];\n    \n    var opts = options || {};\n    this._gridSize = opts[\"gridSize\"] || 60;\n    this._maxZoom = opts[\"maxZoom\"] || 18;\n    this._minClusterSize = opts[\"minClusterSize\"] || 2;           \n    this._isAverageCenter = false;\n    if (opts['isAverageCenter'] != undefined) {\n        this._isAverageCenter = opts['isAverageCenter'];\n    }    \n    this._styles = opts[\"styles\"] || [];\n\n    var that = this;\n    this._map.addEventListener(\"zoomend\",function(){\n        that._redraw();     \n    });\n\n    this._map.addEventListener(\"moveend\",function(){\n        that._redraw();     \n    });\n\n    var mkrs = opts[\"markers\"];\n    isArray(mkrs) && this.addMarkers(mkrs);\n};\n\n/**\n * 添加要聚合的标记数组。\n * @param {Array<Marker>} markers 要聚合的标记数组\n *\n * @return 无返回值。\n */\nMarkerClusterer.prototype.addMarkers = function(markers){\n    if (!markers.length) {\n        return\n    }\n    for(var i = 0, len = markers.length; i <len ; i++){\n        this._pushMarkerTo(markers[i]);\n    }\n    this._createClusters();   \n};\n\n/**\n * 把一个标记添加到要聚合的标记数组中\n * @param {BMap.Marker} marker 要添加的标记\n *\n * @return 无返回值。\n */\nMarkerClusterer.prototype._pushMarkerTo = function(marker){\n    var index = indexOf(marker, this._markers);\n    if(index === -1){\n        marker.isInCluster = false;\n        this._markers.push(marker);//Marker拖放后enableDragging不做变化，忽略\n    }\n};\n\n/**\n * 添加一个聚合的标记。\n * @param {BMap.Marker} marker 要聚合的单个标记。\n * @return 无返回值。\n */\nMarkerClusterer.prototype.addMarker = function(marker) {\n    this._pushMarkerTo(marker);\n    this._createClusters();\n};\n\n/**\n * 根据所给定的标记，创建聚合点\n * @return 无返回值\n */\nMarkerClusterer.prototype._createClusters = function(){\n    var mapBounds = this._map.getBounds();\n    if (!mapBounds.getCenter()) {\n        return\n    }\n    var extendedBounds = getExtendedBounds(this._map, mapBounds, this._gridSize);\n    for(var i = 0, marker; marker = this._markers[i]; i++){\n        if(!marker.isInCluster && extendedBounds.containsPoint(marker.getPosition()) ){ \n            this._addToClosestCluster(marker);\n        }\n    }   \n};\n\n/**\n * 根据标记的位置，把它添加到最近的聚合中\n * @param {BMap.Marker} marker 要进行聚合的单个标记\n *\n * @return 无返回值。\n */\nMarkerClusterer.prototype._addToClosestCluster = function (marker){\n    var distance = 4000000;\n    var clusterToAddTo = null;\n    var position = marker.getPosition();\n    for(var i = 0, cluster; cluster = this._clusters[i]; i++){\n        var center = cluster.getCenter();\n        if(center){\n            var d = this._map.getDistance(center, marker.getPosition());\n            if(d < distance){\n                distance = d;\n                clusterToAddTo = cluster;\n            }\n        }\n    }\n\n    if (clusterToAddTo && clusterToAddTo.isMarkerInClusterBounds(marker)){\n        clusterToAddTo.addMarker(marker);\n    } else {\n        var cluster = new Cluster(this);\n        cluster.addMarker(marker);            \n        this._clusters.push(cluster);\n    }    \n};\n\n/**\n * 清除上一次的聚合的结果\n * @return 无返回值。\n */\nMarkerClusterer.prototype._clearLastClusters = function(){\n    for(var i = 0, cluster; cluster = this._clusters[i]; i++){            \n        cluster.remove();\n    }\n    this._clusters = [];//置空Cluster数组\n    this._removeMarkersFromCluster();//把Marker的cluster标记设为false\n};\n\n/**\n * 清除某个聚合中的所有标记\n * @return 无返回值\n */\nMarkerClusterer.prototype._removeMarkersFromCluster = function(){\n    for(var i = 0, marker; marker = this._markers[i]; i++){\n        marker.isInCluster = false;\n    }\n};\n\n/**\n * 把所有的标记从地图上清除\n * @return 无返回值\n */\nMarkerClusterer.prototype._removeMarkersFromMap = function(){\n    for(var i = 0, marker; marker = this._markers[i]; i++){\n        marker.isInCluster = false;\n        var label = marker.getLabel();\n        this._map.removeOverlay(marker);\n        marker.setLabel(label);\n    }\n};\n\n/**\n * 删除单个标记\n * @param {BMap.Marker} marker 需要被删除的marker\n *\n * @return {Boolean} 删除成功返回true，否则返回false\n */\nMarkerClusterer.prototype._removeMarker = function(marker) {\n    var index = indexOf(marker, this._markers);\n    if (index === -1) {\n        return false;\n    }\n    this._map.removeOverlay(marker);\n    this._markers.splice(index, 1);\n    return true;\n};\n\n/**\n * 删除单个标记\n * @param {BMap.Marker} marker 需要被删除的marker\n *\n * @return {Boolean} 删除成功返回true，否则返回false\n */\nMarkerClusterer.prototype.removeMarker = function(marker) {\n    var success = this._removeMarker(marker);\n    if (success) {\n        this._clearLastClusters();\n        this._createClusters();\n    }\n    return success;\n};\n\n/**\n * 删除一组标记\n * @param {Array<BMap.Marker>} markers 需要被删除的marker数组\n *\n * @return {Boolean} 删除成功返回true，否则返回false\n */\nMarkerClusterer.prototype.removeMarkers = function(markers) {\n    var success = false;\n    for (var i = 0; i < markers.length; i++) {\n        var r = this._removeMarker(markers[i]);\n        success = success || r; \n    }\n\n    if (success) {\n        this._clearLastClusters();\n        this._createClusters();\n    }\n    return success;\n};\n\n/**\n * 从地图上彻底清除所有的标记\n * @return 无返回值\n */\nMarkerClusterer.prototype.clearMarkers = function() {\n    this._clearLastClusters();\n    this._removeMarkersFromMap();\n    this._markers = [];\n};\n\n/**\n * 重新生成，比如改变了属性等\n * @return 无返回值\n */\nMarkerClusterer.prototype._redraw = function () {\n    this._clearLastClusters();\n    this._createClusters();\n};\n\n/**\n * 获取网格大小\n * @return {Number} 网格大小\n */\nMarkerClusterer.prototype.getGridSize = function() {\n    return this._gridSize;\n};\n\n/**\n * 设置网格大小\n * @param {Number} size 网格大小\n * @return 无返回值\n */\nMarkerClusterer.prototype.setGridSize = function(size) {\n    this._gridSize = size;\n    this._redraw();\n};\n\n/**\n * 获取聚合的最大缩放级别。\n * @return {Number} 聚合的最大缩放级别。\n */\nMarkerClusterer.prototype.getMaxZoom = function() {\n    return this._maxZoom;       \n};\n\n/**\n * 设置聚合的最大缩放级别\n * @param {Number} maxZoom 聚合的最大缩放级别\n * @return 无返回值\n */\nMarkerClusterer.prototype.setMaxZoom = function(maxZoom) {\n    this._maxZoom = maxZoom;\n    this._redraw();\n};\n\n/**\n * 获取聚合的样式风格集合\n * @return {Array<IconStyle>} 聚合的样式风格集合\n */\nMarkerClusterer.prototype.getStyles = function() {\n    return this._styles;\n};\n\n/**\n * 设置聚合的样式风格集合\n * @param {Array<IconStyle>} styles 样式风格数组\n * @return 无返回值\n */\nMarkerClusterer.prototype.setStyles = function(styles) {\n    this._styles = styles;\n    this._redraw();\n};\n\n/**\n * 获取单个聚合的最小数量。\n * @return {Number} 单个聚合的最小数量。\n */\nMarkerClusterer.prototype.getMinClusterSize = function() {\n    return this._minClusterSize;\n};\n\n/**\n * 设置单个聚合的最小数量。\n * @param {Number} size 单个聚合的最小数量。\n * @return 无返回值。\n */\nMarkerClusterer.prototype.setMinClusterSize = function(size) {\n    this._minClusterSize = size;\n    this._redraw();\n};\n\n/**\n * 获取单个聚合的落脚点是否是聚合内所有标记的平均中心。\n * @return {Boolean} true或false。\n */\nMarkerClusterer.prototype.isAverageCenter = function() {\n    return this._isAverageCenter;\n};\n\n/**\n * 获取聚合的Map实例。\n * @return {Map} Map的示例。\n */\nMarkerClusterer.prototype.getMap = function() {\n    return this._map;\n};\n\n/**\n * 获取所有的标记数组。\n * @return {Array<Marker>} 标记数组。\n */\nMarkerClusterer.prototype.getMarkers = function() {\n    return this._markers;\n};\n\n/**\n * 获取聚合的总数量。\n * @return {Number} 聚合的总数量。\n */\nMarkerClusterer.prototype.getClustersCount = function() {\n    var count = 0;\n    for(var i = 0, cluster; cluster = this._clusters[i]; i++){\n        cluster.isReal() && count++;     \n    }\n    return count;\n};\n\n/**\n * @ignore\n * Cluster\n * @class 表示一个聚合对象，该聚合，包含有N个标记，这N个标记组成的范围，并有予以显示在Map上的TextIconOverlay等。\n * @constructor\n * @param {MarkerClusterer} markerClusterer 一个标记聚合器示例。\n */\nfunction Cluster(markerClusterer){\n    this._markerClusterer = markerClusterer;\n    this._map = markerClusterer.getMap();\n    this._minClusterSize = markerClusterer.getMinClusterSize();\n    this._isAverageCenter = markerClusterer.isAverageCenter();\n    this._center = null;//落脚位置\n    this._markers = [];//这个Cluster中所包含的markers\n    this._gridBounds = null;//以中心点为准，向四边扩大gridSize个像素的范围，也即网格范围\n    this._isReal = false; //真的是个聚合\n\n    this._clusterMarker = new TextIconOverlay(this._center, this._markers.length, {\"styles\":this._markerClusterer.getStyles()});\n    //this._map.addOverlay(this._clusterMarker);\n}\n\n/**\n * 向该聚合添加一个标记。\n * @param {Marker} marker 要添加的标记。\n * @return 无返回值。\n */\nCluster.prototype.addMarker = function(marker){\n    if(this.isMarkerInCluster(marker)){\n        return false;\n    }//也可用marker.isInCluster判断,外面判断OK，这里基本不会命中\n\n    if (!this._center){\n        this._center = marker.getPosition();\n        this.updateGridBounds();//\n    } else {\n        if(this._isAverageCenter){\n            var l = this._markers.length + 1;\n            var lat = (this._center.lat * (l - 1) + marker.getPosition().lat) / l;\n            var lng = (this._center.lng * (l - 1) + marker.getPosition().lng) / l;\n            this._center = new BMap.Point(lng, lat);\n            this.updateGridBounds();\n        }//计算新的Center\n    }\n\n    marker.isInCluster = true;\n    this._markers.push(marker);\n\n    var len = this._markers.length;\n    if(len < this._minClusterSize ){     \n        this._map.addOverlay(marker);\n        //this.updateClusterMarker();\n        return true;\n    } else if (len === this._minClusterSize) {\n        for (var i = 0; i < len; i++) {\n            var label = this._markers[i].getLabel();\n            this._markers[i].getMap() && this._map.removeOverlay(this._markers[i]);\n            this._markers[i].setLabel(label);\n        }\n        \n    } \n    this._map.addOverlay(this._clusterMarker);\n    this._isReal = true;\n    this.updateClusterMarker();\n    return true;\n};\n\n/**\n * 判断一个标记是否在该聚合中。\n * @param {Marker} marker 要判断的标记。\n * @return {Boolean} true或false。\n */\nCluster.prototype.isMarkerInCluster= function(marker){\n    if (this._markers.indexOf) {\n        return this._markers.indexOf(marker) != -1;\n    } else {\n        for (var i = 0, m; m = this._markers[i]; i++) {\n            if (m === marker) {\n                return true;\n            }\n        }\n    }\n    return false;\n};\n\n/**\n * 判断一个标记是否在该聚合网格范围中。\n * @param {Marker} marker 要判断的标记。\n * @return {Boolean} true或false。\n */\nCluster.prototype.isMarkerInClusterBounds = function(marker) {\n    return this._gridBounds.containsPoint(marker.getPosition());\n};\n\nCluster.prototype.isReal = function(marker) {\n    return this._isReal;\n};\n\n/**\n * 更新该聚合的网格范围。\n * @return 无返回值。\n */\nCluster.prototype.updateGridBounds = function() {\n    var bounds = new BMap.Bounds(this._center, this._center);\n    this._gridBounds = getExtendedBounds(this._map, bounds, this._markerClusterer.getGridSize());\n};\n\n/**\n * 更新该聚合的显示样式，也即TextIconOverlay。\n * @return 无返回值。\n */\nCluster.prototype.updateClusterMarker = function () {\n    if (this._map.getZoom() > this._markerClusterer.getMaxZoom()) {\n        this._clusterMarker && this._map.removeOverlay(this._clusterMarker);\n        for (var i = 0, marker; marker = this._markers[i]; i++) {\n            this._map.addOverlay(marker);\n        }\n        return;\n    }\n\n    if (this._markers.length < this._minClusterSize) {\n        this._clusterMarker.hide();\n        return;\n    }\n\n    this._clusterMarker.setPosition(this._center);\n    \n    this._clusterMarker.setText(this._markers.length);\n\n    this._clusterMarker.addEventListener && !this._clusterMarker._hasClickEvent && this._clusterMarker.addEventListener(\"click\", function(event){\n        this._clusterMarker._hasClickEvent = true;\n        this._markers && this._map.setViewport(this.getBounds());\n    }.bind(this));\n};\n\n/**\n * 删除该聚合。\n * @return 无返回值。\n */\nCluster.prototype.remove = function(){\n    for (var i = 0, m; m = this._markers[i]; i++) {\n        var label = this._markers[i].getLabel();\n        this._markers[i].getMap() && this._map.removeOverlay(this._markers[i]);\n        this._markers[i].setLabel(label);\n    }//清除散的标记点\n    this._map.removeOverlay(this._clusterMarker);\n    this._markers.length = 0;\n    delete this._markers;\n};\n\n/**\n * 获取该聚合所包含的所有标记的最小外接矩形的范围。\n * @return {BMap.Bounds} 计算出的范围。\n */\nCluster.prototype.getBounds = function() {\n    var bounds = new BMap.Bounds(this._center,this._center);\n    for (var i = 0, marker; marker = this._markers[i]; i++) {\n        bounds.extend(marker.getPosition());\n    }\n    return bounds;\n};\n\n/**\n * 获取该聚合的落脚点。\n * @return {BMap.Point} 该聚合的落脚点。\n */\nCluster.prototype.getCenter = function() {\n    return this._center;\n};\n\nreturn MarkerClusterer;\n\n})));\n"],
  "mappings": "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",
  "names": ["global", "module", "exports", "TextIconOverlay"]
}
